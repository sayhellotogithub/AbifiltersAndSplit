apply plugin: 'com.android.application'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.iblogstreet.abifiltersandsplit"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

//        ndk {
//            abiFilters "arm64-v8a", "armeabi-v7a"
//        }
    }
    //for debug
//    splits{
//        // Configures multiple APKs based on ABI.
//        abi {
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86, armeabi-v7a, and mips.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
//
//            // Specifies that we want to also generate a universal APK that includes all ABIs.
//            universalApk true
//        }
//    }
    //for release
    splits {
        abi {
            def isReleaseBuild = false

            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it ==~ /:app:assemble.*Release/) {
                    isReleaseBuild = true
                    return true // break
                }

                return false // continue
            }

            // Enables building multiple APKs per ABI.
            enable isReleaseBuild
            //...
            universalApk true
        }
    }

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2,'x86':3, 'x86_64':4]

    // APKs for the same app that all have the same version information.
    android.applicationVariants.all { variant ->
        // Assigns a different version code for each output APK.
        variant.outputs.each {
            output ->
                def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                output.versionCodeOverride = abiCodes.get(abiName, 0) * 100000 + variant.versionCode
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api('com.github.barteksc:android-pdf-viewer:3.0.0-beta.5')
}
